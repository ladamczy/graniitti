$ /home/karolbizon/graniitti/bin/gr 

--------------------------------------------------------------------------
.``````````````````````     ````   ``                        ``   ```   ``
.```..````````````    ` ``          `                             ``    ``
.``..:``````````` ```.``````.`.```                                 `    ``
.``.`.```````   ````     ``-.```.````                               ``` ``
..-.`-.``    `.`   `..``---/--.......``                      `````````````
..:..-.`````.`   `.--oys+ohms:..-.`..```                   ```````````````
.-:.-...`..     .ooshydddddddh+::...``...               ``````````````````
..-......       `yhhdhhmhddddmdy-...-...`                   ``````````````
::::::.`    `    `--/ohdhdhddyo-`   `..`..                               `
so/-.`  `.`.-````-...++/syhdho`        `..                               `
``..--.:o-..--..-/-::-.-:/ohh/           `                            `` `
`.-::-.:yyh/`--.`s+ohso:/shhd:                                      ``  `-
.:/-s+o+syhs--:/-..-oydyshhhho`                                 ````` ``./
.-+:-+shhhys+ysyh//sshyy/:oohyo.```````` `````` ````````````...::..  `.-oh
-..-..:/+shhhyhhhyhysso.   ``:ys:----............------:::::++oo-  `.-:ohd
--+:--//:::/+oyyshhs+`   ``   .+so+++++++++++/-://+++++++++o+/-```-/yhhys+
`/dysyhs/:::-:o+/-.`   `...    `..::+oooooo+:-``.:+oooo+/:-.```.:/ssso/.``
``:oossso-.--.-.    ..`...`..`.``...`-/ossys+ssoso+ys:--..::/:/--.-//:```.
```````` `   `-.` `....```...:++.`./o:+-:/-:://----...--.`-::::+ys/.`.:/sy
```...-...`/...... ` `..`...`yo+:/o.:oshssy/.  ``  `.--.--:+sys+-` -+ossss
``.//-/++-sh+-.-..`-`.-.--.- :hhho/+//:/yyyhhs+::+o+/++ssssso:.`-::oyssyyy
`/yhoshhhh////++:.....`:yy+/...sddhs/:////:-/++ooo+oyssyoo:.`:/+oosssshddd
`dddyhydhdyyddhddo``.+.`+/oyoh-..+yddho/-......--:----://+osyyhho++/--::/+
/hddhmhmhmdmddhdds:+s+:+/-:++hhh//.-/++osssso++/-.````.-://::-.....`......


GRANIITTI - Monte Carlo event generator for high energy diffraction

Version 1.090 (pre-release) 06.06.2023
<github.com/mieskolainen/graniitti>

References: arXiv:1910.06300, arXiv:2304.06010 [hep-ph]

(c) 2017-2023 Mikael Mieskolainen
<m.mieskolainen@imperial.ac.uk>

<opensource.org/licenses/GPL-3.0>
<opensource.org/licenses/MIT>
--------------------------------------------------------------------------
Running on 120-D11 (8 CORE / 31.22 GB RAM) at 2024-10-14 11:24:14 
Path '/': size | used | free = 273.0 | 11.6 | 261.5 GB 
Program path: /home/karolbizon/graniitti
Linux 5.4.0-196-generic #216-Ubuntu SMP Thu Aug 29 13:26:53 UTC 2024 x86_64
--------------------------------------------------------------------------
Available processes: 


2->3 x 1->(N-2) LIPS:
               OP[RES]<F>  =  Oddproduced resonance                        |  Odderon x Pomeron   
              PP[CON-]<F>  =  Hadron continuum 2-body with [t-u] amp.      |  Pomeron               | AMPLITUDE SIGN FLIP!
       PP[CONTENSOR24]<F>  =  Hadron continuum 2-body > 4-body             |  Tensor Pomeron        | DEVELOPER ONLY PROCESS!
         PP[CONTENSOR]<F>  =  Hadron continuum 2-body                      |  Tensor Pomeron      
               PP[CON]<F>  =  Hadron continuum 2/4/6-body                  |  Pomeron             
     PP[RES+CONTENSOR]<F>  =  Hadron resonances + continuum 2-body         |  Tensor Pomeron / yP 
           PP[RES+CON]<F>  =  Hadron resonances + continuum 2-body         |  Pomeron / yP        
            PP[RESHEL]<F>  =  Sliding pomeron helicity amplitudes          |  Pomeron               | DEVELOPER ONLY PROCESS!
         PP[RESTENSOR]<F>  =  Parametric resonance                         |  Tensor Pomeron      
               PP[RES]<F>  =  Parametric resonance                         |  Pomeron             
               gg[CON]<F>  =  QCD continuum gg, 2 x pseudoscalar           |  Durham QCD            | UNDER VALIDATION!
              gg[FLUX]<F>  =  Durham flux with |A|^2 = 1                   |  Durham QCD            | SYSTEM TEST PROCESS!
           gg[chic(0)]<F>  =  QCD resonance chic(0)                        |  Durham QCD          
         yP[RESTENSOR]<F>  =  Photoproduced resonance                      |  QED x Tensor Pomeron
               yP[RES]<F>  =  Photoproduced resonance                      |  kt-EPA x Pomeron    
               yy[CON]<F>  =  Continuum l+l-, qqbar, W+W-, monopolepair    |  kt-EPA              
              yy[FLUX]<F>  =  kt-EPA flux with |A|^2 = 1                   |  kt-EPA                | SYSTEM TEST PROCESS!
             yy[Higgs]<F>  =  SM Higgs                                     |  kt-EPA              
               yy[QED]<F>  =  Continuum l+l-, qqbar                        |  FULL QED            
               yy[RES]<F>  =  Parametric resonance                         |  kt-EPA              
     yy[monopolium(0)]<F>  =  Monopolium (J=0)                             |  kt-EPA              

2->N LIPS:
               OP[RES]<C>  =  Oddproduced resonance                        |  Odderon x Pomeron   
              PP[CON-]<C>  =  Hadron continuum 2-body with [t-u] amp.      |  Pomeron               | AMPLITUDE SIGN FLIP!
       PP[CONTENSOR24]<C>  =  Hadron continuum 2-body > 4-body             |  Tensor Pomeron        | DEVELOPER ONLY PROCESS!
         PP[CONTENSOR]<C>  =  Hadron continuum 2-body                      |  Tensor Pomeron      
               PP[CON]<C>  =  Hadron continuum 2/4/6-body                  |  Pomeron             
     PP[RES+CONTENSOR]<C>  =  Hadron resonances + continuum 2-body         |  Tensor Pomeron / yP 
           PP[RES+CON]<C>  =  Hadron resonances + continuum 2-body         |  Pomeron / yP        
            PP[RESHEL]<C>  =  Sliding pomeron helicity amplitudes          |  Pomeron               | DEVELOPER ONLY PROCESS!
         PP[RESTENSOR]<C>  =  Parametric resonance                         |  Tensor Pomeron      
               PP[RES]<C>  =  Parametric resonance                         |  Pomeron             
               gg[CON]<C>  =  QCD continuum gg, 2 x pseudoscalar           |  Durham QCD            | UNDER VALIDATION!
              gg[FLUX]<C>  =  Durham flux with |A|^2 = 1                   |  Durham QCD            | SYSTEM TEST PROCESS!
           gg[chic(0)]<C>  =  QCD resonance chic(0)                        |  Durham QCD          
         yP[RESTENSOR]<C>  =  Photoproduced resonance                      |  QED x Tensor Pomeron
               yP[RES]<C>  =  Photoproduced resonance                      |  kt-EPA x Pomeron    
               yy[CON]<C>  =  Continuum l+l-, qqbar, W+W-, monopolepair    |  kt-EPA              
              yy[FLUX]<C>  =  kt-EPA flux with |A|^2 = 1                   |  kt-EPA                | SYSTEM TEST PROCESS!
             yy[Higgs]<C>  =  SM Higgs                                     |  kt-EPA              
               yy[QED]<C>  =  Continuum l+l-, qqbar                        |  FULL QED            
               yy[RES]<C>  =  Parametric resonance                         |  kt-EPA              
     yy[monopolium(0)]<C>  =  Monopolium (J=0)                             |  kt-EPA              

Quasielastic:
                 X[DD]<Q>  =  Double Diffractive                           |  Triple Pomeron        | With TOY fragmentation
                 X[EL]<Q>  =  Elastic                                      |  Eikonal Pomeron       | Use with screening loop on
                 X[ND]<Q>  =  Non-Diffractive                              |  N-cut soft Pomerons   | With TOY fragmentation
                 X[SD]<Q>  =  Single Diffractive                           |  Triple Pomeron        | With TOY fragmentation

2->1 x (1->M) collinear:
            yy_DZ[CON]<P>  =  Continuum l+l, qqbar, W+W-, monopolepair     |  Collinear Drees-Zeppenfeld EPA
           yy_DZ[FLUX]<P>  =  DZ flux with |A|^2 = 1                       |  Collinear Drees-Zeppenfeld EPA  | SYSTEM TEST PROCESS!
           yy_LUX[CON]<P>  =  Continuum l+l, qqbar, W+W-, monopolepair     |  Collinear LUX-PDF   


Usage:
  /home/karolbizon/graniitti/bin/gr [OPTION...]

  -i, --INPUT arg  Input card                <string>
  -d, --VGRID arg  Use pre-computed MC grid  <string>
  -H, --help       Help

 GENERALPARAM options:
  -o, --OUTPUT arg      Output name             <string>
  -f, --FORMAT arg      Output format           <hepmc3|hepmc2|hepevt>
  -c, --CORES arg       Number of CPU threads   <integer>
  -n, --NEVENTS arg     Number of events        <integer32>
  -g, --INTEGRATOR arg  Integrator              <VEGAS|FLAT>
  -w, --WEIGHTED arg    Weighted events         <true|false>
  -m, --MODELPARAM arg  Model tune              <string>

 PROCESSPARAM options:
  -p, --PROCESS arg  Process                 <string>
  -e, --ENERGY arg   CMS energy              <double>
  -l, --POMLOOP arg  Screening Pomeron loop  <true|false>
  -s, --NSTARS arg   Excite protons          <0|1|2>
  -q, --LHAPDF arg   Set LHAPDF              <string>
  -h, --HIST arg     Histogramming           <0|1|2>
  -r, --RNDSEED arg  Random seed             <integer32>

 Arrow operators:
  use -> between initial and final states
  use &> (instead of ->) for a decoupled central system phase space (use with <F>, <P> class, e.g. for s-channel resonances)
  use  > for recursive decaytree branchings with curly brackets { grand daughters }

 Inline 'on-the-flight' parameters to concatenate with PROCESS string:

  [Generic]
  @FLATAMP:N                              flat matrix element for 'pure' phase space generation, set N to -1 for more info
  @FLATMASS2:true                         flat sampling in M^2 instead of relativistic Breit-Wigner f(M^2) in decay trees
  @OFFSHELL:X                             how many +- full widths particles off-shell in decay trees (X = 0 on-shell, X = 5 default)
  @PDG[X]{M:350.0, W:5.0}                 new mass and width for pdg particle id X
  @R[f0_980]{M:0.990, W:0.065}            set new central resonance mass and width
  @RES{rho_770:1, ..., f2_1270:1}         set active resonances in the amplitude (1 active, 0 inactive)

  [Pomeron amplitudes]
  @SPINGEN:true                           set generation 2->1 spin correlations active (true, false)
  @SPINDEC:true                           set decay 1->2 spin correlations active (true, false)
  @FRAME:X                                set Lorentz frame definition for the spin density matrix (X = CS, HX, CM)
  @R[f2_1270]{JZ0:0.5, JZ1:0.0, JZ2:0.5}  set new diagonal spin density matrix elements for resonances
  @JMAX:X                                 set maximum Pomeron helicity for the sliding helicity amplitudes

  [Tensor pomeron amplitudes]
  @R[f0_980]{g0:1.0, g1:0.2, ...}         set new production couplings {g0,g1} [scalar/pseudoscalar] {g0,...,g6} [tensor]

 PROCESS string examples:
  yy[CON]<C> -> mu+ mu-
  yy[Higgs]<F> &> 22 22
  yy[CON]<C> -> 992 -992 @PDG[992]{M:1500,W:0}
  yP[RESTENSOR]<C> -> pi+ pi- @RES{rho_770:1}
  PP[CON]<C> -> rho(770)0 > {pi+ pi-} rho(770)0 > {pi+ pi-}
  PP[CON]<F> -> pi+ pi- pi+ pi-
  PP[CON]<C> -> p+ p- @FLATAMP:2
  PP[RES+CON]<F> -> pi+ pi- @RES{f0_500:0,rho_770:1,f0_980:1,f2_1270:1} @R[f0_980]{M:0.98,W:0.065}

 A steering card example with no additional input:
  /home/karolbizon/graniitti/bin/gr -i gencard/test.json

 A steering card example with commandline input override:
  /home/karolbizon/graniitti/bin/gr -i gencard/test.json -p "yy[QED]<F> -> e+ e-"

 A steering card example with pre-computed MC integration array and custom random seed (for e.g. GRID computing):
  /home/karolbizon/graniitti/bin/gr -i gencard/test.json -d vgrid/test.vgrid -r 12345


--------------------------------------------------------------------------------
This version 1.09 (06.06.2023) is up to date with the online version
--------------------------------------------------------------------------------

~MGraniitti [DONE]
