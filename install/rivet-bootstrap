#! /usr/bin/env bash

# Rivet bootstrapping / installation script for version 3.1.4

test -z "$BUILD_PREFIX" && BUILD_PREFIX="$PWD"
test -z "$INSTALL_PREFIX" && INSTALL_PREFIX="$PWD/local"
test -z "$MAKE" && MAKE="make -j3"

test -z "$INSTALL_HEPMC" && INSTALL_HEPMC="1"
test -z "$INSTALL_FASTJET" && INSTALL_FASTJET="1"
test -z "$INSTALL_FJCONTRIB" && INSTALL_FJCONTRIB="1"
test -z "$INSTALL_YODA" && INSTALL_YODA="1"
test -z "$INSTALL_RIVET" && INSTALL_RIVET="1"

test -z "$RIVET_VERSION" && RIVET_VERSION="3.1.4"
test -z "$YODA_VERSION" && YODA_VERSION="1.9.0"

test -z "$HEPMC_VERSION" && HEPMC_VERSION="2.06.11" #< TODO: update to v3
test -z "$FASTJET_VERSION" && FASTJET_VERSION="3.3.4"
test -z "$FJCONTRIB_VERSION" && FJCONTRIB_VERSION="1.045"
test -z "$CYTHON_VERSION" && CYTHON_VERSION="0.29.21"

test -z "$INSTALL_CYTHON" && INSTALL_CYTHON="1"
test -z "$INSTALL_AUTOTOOLS" && INSTALL_AUTOTOOLS="0"

test -z "$INSTALL_RIVETDEV" && INSTALL_RIVETDEV="0"  #< mostly here just for documentation!
test -z "$YODA_BRANCH" && YODA_BRANCH="release-1-9-x"
test -z "$RIVET_BRANCH" && RIVET_BRANCH="release-3-1-x"


## Rivet needs C++14 now: first run a simple test for that
test -n "$CXX" || CXX="g++"
CXXVERSION=$($CXX -dumpfullversion -dumpversion 2> /dev/null)
test -n "$CXXVERSION" && CXXVERSION=" $CXXVERSION" #< get spacing right in printout below
echo "int main() { return 0; }" > cxxtest.cc
CXXDIALECT=c++14
GOODCXX=1
$CXX -std=$CXXDIALECT cxxtest.cc -o cxxtest &> /dev/null || GOODCXX=0
rm -f cxxtest cxxtest.cc
if [[ "$GOODCXX" -ne 1 ]]; then
    echo "$CXX$CXXVERSION does not accept the -std=$CXXDIALECT flag. You need C++ to build Rivet: exiting installation :-("
    exit 1
else
    echo "$CXX$CXXVERSION accepts the -std=$CXXDIALECT flag: hurrah! Continuing installation..."
    echo
fi


## Paths for the case of existing installations
test -z "$HEPMCPATH" && HEPMCPATH="/usr"
test -z "$FASTJETPATH" && FASTJETPATH="/usr"
test -z "$YODAPATH" && YODAPATH="/usr"

test -z "$RIVET_CONFFLAGS" && RIVET_CONFFLAGS="" #--enable-unvalidated
test -z "$YODA_CONFFLAGS" && YODA_CONFFLAGS=""


## Developer mode
if [[ "$INSTALL_RIVETDEV" -eq "1" ]]; then
    ## For rivetdev we skip the normal yoda/rivet installation
    INSTALL_YODA="0"
    INSTALL_RIVET="0"
    YODA_VERSION="dev"
    RIVET_VERSION="dev"

    ## Test that necessary build tools exist or are requested for installation
    if [[ -z "$(which git 2> /dev/null)" ]]; then
        echo "git not found: you need a git installation to install Rivet+YODA in dev mode"
        exit 2
    fi
    if [[ "$INSTALL_AUTOTOOLS" != "1" ]]; then
        if [[ -z "$(which autoconf 2> /dev/null)" || -z "$(which autoreconf 2> /dev/null)" || -z "$(which automake 2> /dev/null)" || -z "$(which libtoolize 2> /dev/null)" ]]; then
            echo "autotools (i.e. autoconf, automake, etc.) not found: you need these to install Rivet+YODA in dev mode. Maybe run with INSTALL_AUTOTOOLS=1?"
            exit 2
        fi
    fi
    if [[ "$INSTALL_CYTHON" != "1" ]]; then
        if [[ -z "$(which cython 2> /dev/null)" ]]; then
            echo "cython not found: you need a cython installation to install Rivet+YODA in dev mode. Maybe run with INSTALL_CYTHON=1?"
            exit 1
        fi
    fi
fi


## Disable asserts for production running
export CPPFLAGS="$CPPFLAGS -DNDEBUG"


###############

echo "Running Rivet bootstrap script"
echo "Building Rivet $RIVET_VERSION, YODA $YODA_VERSION"
echo

## Immediate exit on a command (group) failure and optional debug mode
set -e
test -n "$DEBUG" && set -x
export PATH=$INSTALL_PREFIX/bin:$PATH

function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
function mmi { $MAKE "$@" && $MAKE install; }


## Make installation directory, with an etc subdir so Rivet etc. will install bash completion scripts
mkdir -p $INSTALL_PREFIX/etc/bash_completion.d
mkdir -p $INSTALL_PREFIX/lib
if [[ ! -e $INSTALL_PREFIX/lib64 ]]; then ln -s lib $INSTALL_PREFIX/lib64; fi


## Install HepMC
if [[ ${HEPMC_VERSION::1} = 2 ]]; then
  HEPMC3=0
  HEPMCNAME=hepmc
else
  HEPMC3=1
  HEPMCNAME=hepmc3
fi
if [[ "$INSTALL_HEPMC" -eq "1" ]]; then
    echo "INSTALLING HEPMC $HEPMC_VERSION"
    cd $BUILD_PREFIX
    if [[ $HEPMC3 = 1 ]]; then
        test -d HepMC3-$HEPMC_VERSION || wget_untar http://hepmc.web.cern.ch/hepmc/releases/HepMC3-$HEPMC_VERSION.tar.gz
        mkdir -p HepMC3-$HEPMC_VERSION-build && cd HepMC3-$HEPMC_VERSION-build
        cmake ../HepMC3-$HEPMC_VERSION/ -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DHEPMC3_ENABLE_ROOTIO=OFF -DHEPMC3_ENABLE_PYTHON=OFF -Dmomentum=GEV -Dlength=MM
    else
        test -d HepMC-$HEPMC_VERSION || wget_untar http://hepmc.web.cern.ch/hepmc/releases/hepmc$HEPMC_VERSION.tgz
        mkdir -p HepMC-$HEPMC_VERSION-build && cd HepMC-$HEPMC_VERSION-build
        cmake ../HepMC-$HEPMC_VERSION/ -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -Dmomentum=GEV -Dlength=MM
    fi
    mmi
    HEPMCPATH=$INSTALL_PREFIX
    echo
fi


# ********************************************
# FORCE HEPMC3
HEPMCNAME=hepmc3
HEPMCPATH=$HOME/local/HEPMC3
# ********************************************


## Install FastJet
if [[ "$INSTALL_FASTJET" -eq "1" ]]; then
    echo "INSTALLING FASTJET $FASTJET_VERSION"
    cd $BUILD_PREFIX
    test -d fastjet-$FASTJET_VERSION || wget_untar http://www.fastjet.fr/repo/fastjet-$FASTJET_VERSION.tar.gz
    cd fastjet-$FASTJET_VERSION
    conf --enable-shared --disable-auto-ptr --enable-allcxxplugins
    mmi
    FASTJETPATH=$INSTALL_PREFIX
    echo
fi

## Install fjcontrib
if [[ "$INSTALL_FJCONTRIB" -eq "1" ]]; then
    echo "INSTALLING FASTJET CONTRIB $FJCONTRIB_VERSION"
    cd $BUILD_PREFIX
    test -d fastjet-$FJCONTRIB_VERSION || wget_untar http://fastjet.hepforge.org/contrib/downloads/fjcontrib-$FJCONTRIB_VERSION.tar.gz
    cd fjcontrib-$FJCONTRIB_VERSION
    ./configure --fastjet-config=$FASTJETPATH/bin/fastjet-config CXXFLAGS=-fPIC # fastjet-config already contains INSTALL_PREFIX
    mmi fragile-shared-install
    # does not need FJCONTRIBPATH because the relevant includes/libraries are merged with regular FastJet structure
    echo
fi

## Install Cython
if [[ "$INSTALL_CYTHON" -eq "1" ]]; then
    echo "INSTALLING CYTHON $CYTHON_VERSION"
    cd $BUILD_PREFIX
    test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
    export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
    export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
    echo
fi

## Install YODA
if [[ "$INSTALL_YODA" -eq "1" ]]; then
    echo "INSTALLING YODA $YODA_VERSION"
    cd $BUILD_PREFIX
    test -d YODA-$YODA_VERSION || wget_untar http://www.hepforge.org/archive/yoda/YODA-$YODA_VERSION.tar.gz
    cd YODA-$YODA_VERSION
    conf $YODA_CONFFLAGS
    mmi
    cp yodaenv.sh $INSTALL_PREFIX/yodaenv.sh
    YODAPATH=$INSTALL_PREFIX
    echo
fi

## Install Rivet
if [[ "$INSTALL_RIVET" -eq "1" ]]; then
    echo "INSTALLING RIVET $RIVET_VERSION"
    cd $BUILD_PREFIX
    test -d Rivet-$RIVET_VERSION || wget_untar http://www.hepforge.org/archive/rivet/Rivet-$RIVET_VERSION.tar.gz
    cd Rivet-$RIVET_VERSION
    conf $RIVET_CONFFLAGS \
        --with-yoda=$YODAPATH \
        --with-$HEPMCNAME=$HEPMCPATH \
        --with-fastjet=$FASTJETPATH
    mmi
    cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    echo
fi


## Following block for dev mode only -- non-developers should ignore
if [[ "$INSTALL_RIVETDEV" -eq "1" ]]; then

    ## Install autotools
    if [[ "$INSTALL_AUTOTOOLS" -eq "1" ]]; then
        cd $BUILD_PREFIX
        function _build_autotool() {
            name=$1-$2
            if [ ! -e $name ]; then wget_untar http://ftpmirror.gnu.org/$1/$name.tar.gz; fi
            cd $name
            ./configure --prefix=$INSTALL_PREFIX
            mmi
            cd ..
        }
        test -e $INSTALL_PREFIX/bin/m4       || { echo; echo "Building m4"; _build_autotool m4 1.4.18; }
        test -e $INSTALL_PREFIX/bin/autoconf || { echo; echo "Building autoconf"; _build_autotool autoconf 2.69; }
        test -e $INSTALL_PREFIX/bin/automake || { echo; echo "Building automake"; _build_autotool automake 1.16.1; }
        test -e $INSTALL_PREFIX/bin/libtool  || { echo; echo "Building libtool"; _build_autotool libtool 2.4.6; }
        echo
    fi

    ## Install dev YODA
    cd $BUILD_PREFIX
    echo "INSTALLING YODA $YODA_VERSION"
    # test -d yoda || hg clone https://phab.hepforge.org/source/yodahg/yoda -b release-1-7 --insecure
    # cd yoda
    # hg pull -u --insecure
    #
    #test -d yoda || git clone git@gitlab.com:hepcedar/yoda.git yoda
    test -d yoda || git clone https://gitlab.com/hepcedar/yoda.git yoda
    cd yoda
    git checkout $YODA_BRANCH
    git pull
    autoreconf -i
    conf $YODA_CONFFLAGS
    mmi
    cp yodaenv.sh $INSTALL_PREFIX/yodaenv.sh
    YODAPATH=$INSTALL_PREFIX
    echo

    ## Install dev Rivet
    cd $BUILD_PREFIX
    echo "INSTALLING RIVET $RIVET_VERSION"
    # test -d rivet || hg clone https://phab.hepforge.org/source/rivethg/rivet -u release-3-0-x --insecure
    # cd rivet
    # hg pull -u --insecure
    #
    #test -d rivet || git clone git@gitlab.com:hepcedar/rivet.git rivet
    test -d rivet || git clone https://gitlab.com/hepcedar/rivet.git rivet
    cd rivet
    git checkout $RIVET_BRANCH
    git pull
    autoreconf -i
    conf $RIVET_CONFFLAGS \
        --with-yoda=$YODAPATH \
        --with-$HEPMCNAME=$HEPMCPATH \
        --with-fastjet=$FASTJETPATH
    mmi
    cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    echo
fi

## Announce the build success
echo "All done. Now set some variables in your shell by sourcing $INSTALL_PREFIX/rivetenv.(c)sh"
