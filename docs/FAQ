GRANIITTI Monte Carlo event generator FAQ
19/05/2022

m.mieskolainen@imperial.ac.uk
-----------

START
-----------

```
git clone --depth 1 https://github.com/mieskolainen/graniitti && cd graniitti
cd install && source autoinstall.sh && cd ..
source install/setenv.sh
make -j4 CXX=g++ 
```

Above, you may use also CXX=clang, but there can be problems with ROOT (which is optional).

** Note that you need GCC > 9 or newer. **



COMPILING UNDER CONDA VIRTUAL ENVIRONMENT
-----------

Under the Conda virtual environment:

```
conda install -c anaconda cmake
conda install gcc_linux-64=9.3.0
conda install gxx_linux-64=9.3.0

ln -s $CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc $CONDA_PREFIX/bin/gcc
ln -s $CONDA_PREFIX/bin/x86_64-conda-linux-gnu-g++ $CONDA_PREFIX/bin/g++
```


FIRST RUN
-----------

Run ./bin/gr and read the output


SOURCE
-----------

├── bin/                - Compiled binary program files
├── develop/            - Developer scripts
├── docs/               - Documentation
├── eikonal/            - Eikonal screening amplitude and proton density arrays
├── figs/               - Figure output directory
├── fitcard/            - Steering cards for fitting programs
├── HEPData/            - Measurement data
|   ├── CD/             - Central Diffraction
|   └── EL/             - Elastic scattering
├── include/            - Header files (C++)
|   └── Graniitti/
|      ├── Amplitude/   - MadGraph amplitude headers
|      └── Analysis/    - ROOT dependent analysis header files
├── input/              - Default steering card input folder
├── install/            - Installation scripts and packages
├── libs/               - External libraries (C++)
├── MG5cards/           - MadGraph amplitude parameter cards
├── modeldata/          - Global model parameters
├── obj/                - Compiled object files
├── output/             - Simulation output folder
├── python/             - HPC distributed tuning via <ray> & analysis tools (in Python)
├── src/                - Source files (C++)
|   ├── Amplitude/      - MadGraph amplitudes
|   ├── Analysis/       - ROOT dependent analysis source files
|   └── Program/        - Main program source files
|      └── Analysis/    - ROOT dependent main program source files
├── sudakov/            - Special transformed gluon pdfs arrays
├── tests/              - Test suite; automated tests, simulations & analysis benchmark examples
├── vgrid/              - MC integration grid outputs, useful for e.g. distributed HPC computation


PROGRAMS
-----------

1. Simulation
-----------

```
./bin/gr             Main simulation program
./bin/xscan          Process cross section energy dependence scanner
./bin/minbias        Minimum bias processes (SD,DD,ND) simulation (for minimalistic rapidity gap fluctuation studies)
./bin/hepmc3tolhe    Convert .hepmc3 to .lhe event output format
```

2. Analysis
-----------

```
./python/*           Analysis and tuning with Python 3 libraries

./bin/analyze        Fast histogramming and plotting of fiducial observables in central production
./bin/fitharmonic    Spherical harmonic inverse expansion and analysis
./bin/fitsoft        Fit tool for the eikonal Pomeron model parameters
./bin/data2hepmc3    Push events from external sources to .hepmc3 format for a quick analysis (code template)
```

3. Automated tests
-----------

Compile with 'make -j4 TEST=TRUE'

```
./bin/testbench*     Test cases using C++ catch2 framework
./tests/megarun.sh   Will run all the global and unit tests, runtime 1 hour+
```

pytest ./tests/testbench_exloop.py -s 
Loops over pre-defined fiducial measurements and produces a comparison table


INSTALLATION
-----------

Q:  It does not compile :(
A:  If you use MacOSX, try to obtain the latest GCC toolchain.
    The software is being tested and developed always on the latest Ubuntu linux (+ ROOT 6).


Q:  I use lxplus.cern.ch, what is the right environment setup?
A:  Try this before compiling anything:
    source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt


Q:  I use a standalone system, for example Ubuntu linux, what do I need for the ROOT libraries setup?
A:  Assuming you have compiled ROOT or use pre-compiled binaries downloaded from <root.cern.ch>,
    which are extracted for example to $HOME/local/root, then setup these 3 lines in your environment:
    
    ```
    export ROOTSYS=$HOME/local/root
    export PATH=$ROOTSYS/bin:$PATH
    export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH
    ```

    And make sure that these paths make sense, so that you find binaries/objects/headers
    under $ROOTSYS/bin, $ROOTSYS/lib, $ROOTSYS/include.

    Hint:  Try also the default ROOT environment setup macro "source $ROOTSYS/bin/thisroot.sh"

    Hint2: Note that ROOT 6.18 is seemingly the last version with "old Python" environment, not crucial here,
    but can be for compatibility with other programs.


Q:  Compilation with ROOT failes due to reason such as "‘handlePrefetch’ was not declared in this scope".
A:  Your ROOT library is probably not compiled with -std=c++14 (or -std=c++17) switch,
    so try again with 'make -j4 CXX_ROOT=c++17'.


Q:  How to turn off ROOT dependent compilation completely?
A:  Compile with 'make -j4 ROOTSYS=' or run 'unset ROOTSYS' for removing the shell variable.
    The simulation part of GRANIITTI is not dependent on ROOT but some analysis tools depend on it.



BASIC OPERATION
-----------

Q:  Your generator does not match (my) data!
A:  GRANIITTI includes a spectrum of different amplitudes and model variations.
    For strong interaction (Pomeron driven) amplitudes, you may start with the simplest one, PP[CON],
    and try the intermediate form factor of 'Orear' and 'power law' types (large effects in e.g. \Delta\phi_pp).
    Then, try with and without the screening (absorption) loop turned on. Once this behavior is understood,
    try adding resonances, PP[RES+CON], and perhaps adjust the resonance spin polarization parameters
    and so on. You can always send email for instructions on how to do e.g. distributed model tuning.
    
    PS. Solid fiducial measurements should be executed in a way that the arbitrary generator model
    dependence is minimized, e.g. by using techniques such as DeepEfficiency [https://arxiv.org/abs/1809.06101].


Q:  I get "error while loading shared libraries: libHepMC3.so.1: cannot open shared object file"
A:  Always remember the environment setup: 'source ./install/setenv.sh'


Q:  Where are the examples of .json steering cards?
A:  Under /tests/processes folder. Make a copy and modify.


Q:  How do I choose the final state?
A:  After the '->' arrow, write down the final state in terms of PDG
    numbers such as '22 22' or their names such as 'gamma gamma'.
    Events are distributed according to the phase space in the case
    no amplitude is explicitly constructed for that particular
    decay. Any (cascade) final state is possible within the phase space.
    For example '-> A > {A1 > {A11 A12} A2 A3} B > {B1 B2 > {B21 B22} B3}'.


Q:  How do I know the PDG numbers/names?
A:  Write down something (dummy) after the '->' arrow,
    and try to generate. You will get a list of all particles.


Q:  What are the intermediate state (propagators, central systems, excited forward systems)
    PDG ID codes and the status codes in general?
A:  Check /include/MPDG.h file.


Q:  How do I get the minimum bias process cross sections (SD,DD,ND) and generate events?
A:  Use ./bin/minbias program. Running processes directly with "PP[SD]<Q>", "PP[DD]<Q>"
    and "PP[ND]<Q>" macros with screening loop turned works too, but the cross section integral is
    calculated properly for non-diffractive (ND) events only via ./bin/minbias program.
    Remember that these events should be fragmented with e.g. PYTHIA.


Q:  What do generation cuts versus fiducial cuts mean?
A:  Generation cuts are applied at the level of phase space sampling
    kinematic construction, completely necessary. Fiducial cuts are
    applied after the event kinematics has been constructed -- this is optional.


Q:  For the analysis/reference purposes, I just want to generate pure J=0 amplitude (S-wave)
    with a smooth invariant mass distribution, flat over rapidity and peripheral (exponential) t-distributions.
A:  Add @FLATAMP:X at the end of your process string with X = 1,2,3,... (try them out).
    For the b-slope parameter, adjust /modeldata/TUNE/GENERAL.json.


Q:  I want to generate a tensor J=2 particle decaying to vector daughters with sequential spin correlations.
A:  This is supported via Jacob-Wick amplitudes. First setup the mother resonance
    with a spin polarization density matrix under /modeldata/TUNE/RES_xxx.json
    (create a new file). One may change the default Lorentz frame using the command line @ input.
    Second, adjust the decay (l,s)-couplings for the intermediate daughters
    under /modeldata/TUNE/BRANCHING.json. Then create a process steering card by following the examples.


Q:  Integrated cross section seems very high?
A:  Turn on the screening integral (event-by-event Pomeron loop). The absorptive effect can be
    very high, depending on the process -- less for gamma-gamma processes.
    Also, take care of the branching ratios and phase space volumes (see below).


Q:  Do forward protons have unlimited kinematic generation cuts by default?
A:  No. Their transverse momentum is limited to few GeV to improve CPU efficiency.
    You see all the cuts in the terminal ascii output.
    You can change this by adding/modifying a field "Pt" under "GENGUTS".


Q:  Can I simulate processes as low in transverse momentum and mass as possible?
A:  In principle yes, the processes are numerically constructed to be floating point and
    kinematically safe. However, note that kt-EPA processes coupled with (MadGraph based) on-shell
    matrix elements should not be trusted here at very low system masses, say M ~ 1 GeV or less,
    with these user should use a minimum mass cutoff. The better way is to run full QED based
    gamma-gamma -> l+l- simulation which goes safely down to 0 GeV, which is the best option.
    
    Naturally, perturbative QCD processes have certain cutoff scales applied.
    If you spot some new problems in some corners of phase space, which may happen
    e.g. due to unfortunate floating point loss of precision, send email.


Q:  I want to know more details about the algorithms and calculations.
A:  Very good, that is the right attitude! You find my heavily commented code
    under /src and /include folders. If you feel something is too dark, just send email --
    I am interested in what is right in terms of physics, what is wrong and in
    improving the code quality. All original calculations etc. are inline referenced
    to arXiv for more information or should be described in the code, if they are derived here.


Q:  Which features or processes are "under construction"?
A:  See /docs/UNDERWORK or send email.



MONTE CARLO TECHNIQUES
-----------

Q:  I am running it on a GRID / distributed computing system, what do I need to do?
A:  Remember to set the random number seed differently on separate instances/machines
    when generating events. Example: './bin/gr -i mycard.json -r 12345'. You may also
    want to use the same MC integration grid for each node, by using -d switch and
    the output data obtained from "/vgrid" folder (first computed on a single node).


Q:  MC integral does not converge (stat. error estimate is very high)!
A:  This can happen if the generation cuts are too loose, the process
    is localized into spesific regime of the phase space and VEGAS
    cannot find suitable binning -> manually tighten up the generation cuts.
    For example, if you generate an isolated resonance with mass M,
    use '<F>' phase space and put the mass boundaries around the
    resonance peak M +- N full widths.


Q:  What are '<C>' and '<F>' phase space classes?
A:  Different ways to organize the phase space sampling.
    With equivalent generation+fiducial cuts, they should produce
    identical results. However, the (other) one can be faster
    or numerically more stable with difficult amplitudes, usually <F> is more stable.
    In general, one may use '<C>' for continuum / continuum+resonance processes
    with 2 outgoing legs and '<F>' in principle with all processes.


Q:  I get different integrals with '<C>' and '<F>' algorithms.
A:  Your cuts are not equivalent. Please note that '<C>' class applies the
    generation cuts to the direct (not daughter) final states and '<F>' applies generation
    cuts to the central system, instead. However, if you then apply also fiducial cuts,
    and make sure that the generation phase space is larger in both cases than the fiducial one,
    you will obtain equivalent numbers with '<C>' and '<F>'.


Q:  What are '->' versus '&>' operators?
A:  The '->' uses full 2->N phase space volume in the cross section
    integration. The &> operator (with '<F>', '<P>' phase space) decouples
    the central system phase space, and the process will be
    [2->3] + [unweighted 1->(N-2) decays]. Thus, the '&>' operator is
    useful to use with isolated scalar resonance processes, for example
    'yy[Higgs]<F>'. That is, with processes which do not contain any decay
    amplitude / matrix element decay part [check the code, if unsure].
    Typically with these processes, user then applies decay branching ratios manually.

    In general:
    ------------------------------------------------------------------------
    |                            |   '<C> ->'  |   '<F> ->'   |  '<F> &>'  |
    |----------------------------|-------------|--------------|------------|            
    | Amp with no decay algebra  |      -      |       -      |    yes     | 
    | Amp with decay algebra*    |     yes     |      yes     |     -      |    
    ------------------------------------------------------------------------
    
    *Decay algebra means relevant decay coupling constants, possible spin algebra etc.


Q:  What do you mean by weighted / unweighted events?
A:  Weighted events have a positive definite weight associated with them, this comes
    naturally from the Monte Carlo sampling. Unweighted have weight == 1
    and generating them is based on acceptance-rejection sampling.


Q:  After unweighted event generation, I get maximum weight overflows warning. What is this?
A:  Your pre-event generation phase will sample the phase space to find out an
    estimate for the maximum integrand weight needed for the acceptance-rejection
    in unweigted event generation. If you get maximum weight overflows, it simply means
    that the event generation phase has found larger integrand values. This is not good,
    even if in practise it may not be extremely serious. To find better maximum weight,
    you should adjust VEGAS parameters, for example: 10 x more samples per iteration,
    10 x smaller relative error target.


Q:  How many CPU multithreading threads can GRANIITTI handle?
A:  As many as your system can. You can try out which number gives the best performance.



ANALYSIS
-----------

Q:  How to do fast plotting of the fiducial observables of a given MC sample
    and stack different MC samples in the same plot?

A:  PYTHON: The latest hi-tech option is 'python ./python/iceshot --hepmc3 file1 file2'
    
    ROOT:   With ROOT installed, just try some examples under /tests/.
    The program ./bin/analyzer calculates a large collection of automated publication quality plots
    for arbitrary central production processes.

    RIVET:  We recommend also one to try RIVET.


Q:  How do I use RIVET?
A:  Install it with /install/installRIVET.sh and see examples under ./tests/run_rivet_*


Q:  I want to do a full spherical harmonics expansion.
A:  Sure, if you have ROOT installed, which is needed here for plotting and
    Extended Maximum Likelihood via TMinuit. This advanced analysis algorithm is fully automated
    including the efficiency and acceptance inversion. See examples under /tests/run_*_harmonic.
    Please do note that this is an ill-posed inverse problem, like unfolding. You need to
    inspect the condition number of moment mixing matrices which is automatically calculated,
    take care of (possible) regularization, have very large MC statistics for the detector expansion and so on.


Q:  I get different spherical harmonic acceptance inversion results in different Lorentz rest frames.
A:  This is expected and is due to a finite spherical harmonics expansion order, say L_max=4. However,
    in the limit of infinite MC statistics and infinite harmonic expansion order, different frames will expand
    the acceptance identically and also the data inversion results should then be identical.

    The expansion itself is just a harmonic fit to a 2D-function in (cos theta,phi)-space in a hyperbin of
    system mass, (Pt, rapidity). In some event-by-event rotated rest frames, the underlying geometric
    2D-acceptance function is more flat, thus requires less harmonic components to fit. Comparing two
    detectors at the same \sqrt{s}, the one with larger geometric (eta,pt)-acceptance requires less
    harmonics, generally speaking. The underlying physics (scattering process) enforces the same practical
    lower limit for the harmonics in both detectors, naturally.


ADVANCED
-----------

Q:  How do I set transverse polarization (Jz = +-1, +-2, ...) or longitudinal polarization (Jz = 0)
    for the parametric resonances?
A:  For the Jacob-Wick helicity amplitudes, see the (fixed) resonance spin density matrices and the chosen
    polarization frame under /modeldata/TUNE/{GENERAL, RES_X}.json. For Tensor Pomeron model, this
    question is fully determined by the model Lorentz structure and the free coupling parameters per
    resonance, again set under /modeldata/{RES_X.json}.


Q:  Can I add some arbitrary new process / amplitude?
A:  Yes you can, the kinematics is constructed to be fully generic and obey standard
    QFT normalization rules. What you need is some knowledge of C++ and then you need
    to study a little bit how the existing amplitudes are implemented in the machinery.
    Basically, you can add them under MSubProc 'umbrella' class.


Q:  How to add new MadGraph based amplitudes / matrix elements?
A:  See the automatic import script and manual procedures README under ./develop/MG2GRA/


Q:  Are the soft central production parameters independent of the screening loop?
A:  No. Strictly speaking one should have two sets of parameters (or tunes),
    one for the screening turned on, one without.
    Or just one, always screening turned on (computationally very demanding, though).


Q:  How well are the soft parameters tuned/fitted?
A:  The soft central production amplitude parameters are such that an approximate
    match with LHC data can be obtained. More high precision, fully exclusive
    but also semi-exclusive (proton dissociative) data is needed. The same
    words also for the PDG resonance branching ratios, which are not too well known
    in all cases (see /modeldata/TUNE/BRANCHING.json). Elastic "eikonal pomeron"
    parameters are tuned with better accuracy to high energy elastic dsigma/dt.
    Low energy data seems to require additional parametrizations (reggeology), which we
    are not currently interested to fit. The ultimate goal is to find minimal
    descriptions, better theoretical understanding of (high energy) data, not a perfect fit.


Q:  Can I make my own tune?
A:  MANUAL: Sure, just copy /modeldata/TUNE0 to e.g. /modeldata/TUNE1, change the
    reference to that in your .json steering card and start tuning. Then go beyond
    and put in your own scattering amplitudes.
    
    AUTOMATED: For distributed HPC tuning via <ray> platform, see /docs/TUNING.
    Basically, the tuning algorithms modify the input parameter json files, generate new MC samples,
    construct the MC histograms from hepmc3 files and compares these with HEPData histograms,
    and then repeats this parameter optimization process by minimizing global chi2.



OTHER
-----------

Q:  Your .json files are not obeying JSON standard.
A:  Yes, I use an extended, new JSON5 standard subset which allows commenting and other
    user friendly properties. You can read them with json5 reader libraries or with
    standard json libraries after some regexp cleaning.


Q:  I want to install it into our collaboration software platform.
A:  Great! However, do NOT embed or create custom interfaces to the
    generator at the level of GRANIITTI classes, instead, use it only through
    .json files and commandline interface and take the HepMC3/2 output.
    First of all, this allows very streamlined and fast updates. Second,
    the generator engine is fully multithreaded and high expert knowledge is
    required for any safe modifications or interfacing at the level of code.
    Just keep the package factorized!


Q:  Something seems weird.
A:  Just send email, it might a bug.

...

